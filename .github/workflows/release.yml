name: Release

on:
  release:
    types: [created]

jobs:
  build-and-upload:
    name: Build and Upload Release Assets
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Get release info
      id: release_info
      run: |
        echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        echo "release_name=$(echo ${GITHUB_REF#refs/tags/} | sed 's/v//')" >> $GITHUB_OUTPUT

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        binary_name="sectore-${{ steps.release_info.outputs.release_name }}-${{ matrix.goos }}-${{ matrix.goarch }}"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          binary_name="${binary_name}.exe"
        fi
        
        go build \
          -ldflags="-s -w -X main.version=${{ steps.release_info.outputs.tag_name }} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
          -o "${binary_name}" \
          cmd/sectore/main.go
        
        # Create archive
        if [ "${{ matrix.goos }}" = "windows" ]; then
          zip "${binary_name%.exe}.zip" "${binary_name}"
          echo "asset_name=${binary_name%.exe}.zip" >> $GITHUB_ENV
        else
          tar -czf "${binary_name}.tar.gz" "${binary_name}"
          echo "asset_name=${binary_name}.tar.gz" >> $GITHUB_ENV
        fi

    - name: Upload release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./${{ env.asset_name }}
        asset_name: ${{ env.asset_name }}
        asset_content_type: application/octet-stream

  create-checksums:
    name: Create Checksums
    runs-on: ubuntu-latest
    needs: build-and-upload
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download release assets
      uses: actions/download-artifact@v4
      with:
        path: ./release-assets

    - name: Generate checksums
      run: |
        cd release-assets
        find . -name "*.tar.gz" -o -name "*.zip" | xargs sha256sum > ../checksums.txt

    - name: Upload checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./checksums.txt
        asset_name: checksums.txt
        asset_content_type: text/plain