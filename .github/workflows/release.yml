name: Release

on:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build-and-upload:
    name: Build and Upload Release Assets
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Add diagnostic logs for build-and-upload job
      run: |
        echo "Runner OS: $(uname -s)"
        echo "Runner Architecture: $(uname -m)"
        echo "Matrix GOOS: ${{ matrix.goos }}"
        echo "Matrix GOARCH: ${{ matrix.goarch }}"
        echo "Is this act? $(if [ -n "$ACT" ]; then echo 'Yes'; else echo 'No'; fi)"
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'


    - name: Get release info
      id: release_info
      run: |
        echo "Diagnostic: Getting release info"
        echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        echo "release_name=$(echo ${GITHUB_REF#refs/tags/} | sed 's/v//')" >> $GITHUB_OUTPUT
        echo "Diagnostic: Release info obtained"

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        binary_name="sectore-${{ steps.release_info.outputs.release_name }}-${{ matrix.goos }}-${{ matrix.goarch }}"
        if [ "${{ matrix.goos }}" = "windows" ] && [ "${{ matrix.goarch }}" = "arm64" ]; then
          # Windows arm64 requires special handling
          GOARM=7
        fi
        if [ "${{ matrix.goos }}" = "windows" ]; then
          binary_name="${binary_name}.exe"
        fi
        
        go build \
          -ldflags="-s -w -X main.version=${{ steps.release_info.outputs.tag_name }} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
          -o "${binary_name}" \
          cmd/sectore/main.go
        
        # Create archive
        if [ "${{ matrix.goos }}" = "windows" ]; then
          zip "${binary_name%.exe}.zip" "${binary_name}"
          echo "asset_name=${binary_name%.exe}.zip" >> $GITHUB_ENV
        else
          tar -czf "${binary_name}.tar.gz" "${binary_name}"
          echo "asset_name=${binary_name}.tar.gz" >> $GITHUB_ENV
        fi

    - name: Upload release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./${{ env.asset_name }}
        asset_name: ${{ env.asset_name }}
        asset_content_type: application/octet-stream

    - name: Diagnostic log after asset upload
      run: |
        echo "Diagnostic: Uploaded asset ${{ env.asset_name }}"
        # The upload action doesn't support run, so we're adding a post-step log if possible, but since it's an action, we'll add a separate step if needed. For now, keep it as is and add a log after if the action allows.
        # Note: Since upload-release-asset is an action, I can't wrap it in a run command easily. Add a separate diagnostic step after upload.

  create-checksums:
    name: Create Checksums
    runs-on: ubuntu-latest
    needs: build-and-upload
    steps:
    - name: Add diagnostic logs for create-checksums job
      run: |
        echo "Runner OS: $(uname -s)"
        echo "Runner Architecture: $(uname -m)"
        echo "Is this act? $(if [ -n "$ACT" ]; then echo 'Yes'; else echo 'No'; fi)"
    
    - name: Download release assets
      uses: actions/download-artifact@v4
      with:
        path: ./release-assets

    - name: Generate checksums
      run: |
        cd release-assets
        echo "Diagnostic: Generating checksums"
        find . -name "*.tar.gz" -o -name "*.zip" | while read file; do
          sha256sum "$file" >> ../checksums.txt
        done
        echo "Diagnostic: Checksums generated"

    - name: Upload checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./checksums.txt
        asset_name: checksums.txt
        asset_content_type: text/plain

    - name: Diagnostic log after checksums upload
      run: |
        echo "Diagnostic: Uploaded checksums.txt"
        # Similar issue as above; actions don't support run wrappers easily.