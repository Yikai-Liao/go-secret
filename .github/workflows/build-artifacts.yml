name: Build Artifacts

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build Cross-Platform Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Linux
          - goos: linux
            goarch: amd64
            platform: linux-amd64
          - goos: linux
            goarch: arm64
            platform: linux-arm64
          - goos: linux
            goarch: arm
            goarm: 7
            platform: linux-armv7
          - goos: linux
            goarch: 386
            platform: linux-386
          # Windows
          - goos: windows
            goarch: amd64
            platform: windows-amd64
            ext: .exe
          - goos: windows
            goarch: arm64
            platform: windows-arm64
            ext: .exe
          - goos: windows
            goarch: 386
            platform: windows-386
            ext: .exe
          # macOS
          - goos: darwin
            goarch: amd64
            platform: macos-amd64
          - goos: darwin
            goarch: arm64
            platform: macos-arm64
          # FreeBSD
          - goos: freebsd
            goarch: amd64
            platform: freebsd-amd64
          - goos: freebsd
            goarch: arm64
            platform: freebsd-arm64
          # OpenBSD
          - goos: openbsd
            goarch: amd64
            platform: openbsd-amd64
          # NetBSD
          - goos: netbsd
            goarch: amd64
            platform: netbsd-amd64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Create build directory
      run: mkdir -p dist

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        GOARM: ${{ matrix.goarm }}
        CGO_ENABLED: 0
      run: |
        binary_name="sectore-${{ matrix.platform }}${{ matrix.ext }}"
        echo "Building $binary_name"
        go build -ldflags="-s -w -X main.version=${{ github.ref_name || github.sha }}" -o "dist/${binary_name}" cmd/sectore/main.go
        
        # Create checksums
        cd dist
        if command -v sha256sum &> /dev/null; then
          sha256sum "${binary_name}" > "${binary_name}.sha256"
        else
          shasum -a 256 "${binary_name}" > "${binary_name}.sha256"
        fi

    - name: Upload individual artifact
      uses: actions/upload-artifact@v4
      with:
        name: sectore-${{ matrix.platform }}
        path: |
          dist/sectore-${{ matrix.platform }}*
        retention-days: 30

  package:
    name: Package All Artifacts
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create release package
      run: |
        mkdir -p release
        
        # Flatten artifacts directory structure
        find artifacts -name "sectore-*" -type f -exec cp {} release/ \;
        
        # Create archive for all binaries
        cd release
        tar -czf ../sectore-all-platforms.tar.gz .
        
        # List all files for verification
        echo "Built artifacts:"
        ls -la

    - name: Upload combined artifact
      uses: actions/upload-artifact@v4
      with:
        name: sectore-all-platforms
        path: |
          sectore-all-platforms.tar.gz
          release/
        retention-days: 90

    - name: Generate build summary
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Platform | Binary | Checksum |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|--------|----------|" >> $GITHUB_STEP_SUMMARY
        
        cd release
        for binary in sectore-*; do
          if [[ ! "$binary" == *.sha256 ]]; then
            size=$(du -h "$binary" | cut -f1)
            checksum_file="${binary}.sha256"
            if [[ -f "$checksum_file" ]]; then
              checksum=$(cut -d' ' -f1 "$checksum_file")
              echo "| $binary | $size | \`${checksum:0:8}...\` |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| $binary | $size | N/A |" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        done