name: CI

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}${{ matrix.arch == 'arm64' && '-arm64' || '' }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.21', '1.22', '1.23']
        arch: [x64, arm64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Add diagnostic logs for test job
      run: |
        echo "Runner OS: $(uname -s)"
        echo "Runner Architecture: $(uname -m)"
        echo "Matrix OS: ${{ matrix.os }}"
        echo "Matrix Go Version: ${{ matrix.go-version }}"
        echo "Matrix Arch: ${{ matrix.arch }}"
        echo "Is this act? $(if [ -n "$ACT" ]; then echo 'Yes'; else echo 'No'; fi)"
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ matrix.arch }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run vet
      run: go vet ./...

    - name: Run tests
      run: |
        echo "Diagnostic: Starting tests for GOOS=$(go env GOOS), GOARCH=$(go env GOARCH)"
        go test -race -coverprofile=coverage.out -covermode=atomic ./...
        echo "Diagnostic: Tests completed"

    - name: Run integration tests
      run: go test -v ./test/...

    - name: Build binary
      run: |
        echo "Diagnostic: Starting build for verification"
        go build -o bin/sectore${{ matrix.os == 'windows-latest' && '.exe' || '' }} cmd/sectore/main.go
        echo "Diagnostic: Build completed"

    - name: Test binary functionality (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        chmod +x bin/sectore
        ./bin/sectore --help

    - name: Test binary functionality (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        .\bin\sectore.exe --help

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23' && matrix.arch == 'x64'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Run golangci-lint with diagnostics
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m
      
    - name: Diagnostic log after linting
      run: |
        echo "Diagnostic: Linting completed"
